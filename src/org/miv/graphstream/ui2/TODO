Pour la version 0.5.0:

	- Ajout et suppression d'attributs avec IO
		- Ajouter l'interface GraphReaderListenerExtended.
		- Ajouter des m�thodes de prise en charge des ajout suppression d'attributs individuels
			dans les writers.
		- dans DGS les signes + et - devant les noms d'attributs permettent le retrait et l'ajout :
			cn "A" +truc:valeur -machin
			La syntaxe + est redondante, le + est optionnel.
		- Les tables de hachage en plus des tablaux dans les attributs. syntaxe possible :
			cn "A" uneTable:[truc:chose;machin:bidule,a:b,c,d;]
		- Ajouter dans IO la possibilit� pour des objets plac�s en attributs de s'exporter sous forme
		  de table de hachage (interface GraphAttribute avec une m�thode toHashTable():String).
	
	
	- Tests JUnit du package Graph
	
	- Un document de "concepts" repris du tutorial.
	
	- Style sheet
		- Dynamic styles :
			- Valeur de couleur interpolées ;
			- Largeurs ;
			- Choses visibles uniquement en fonction du zoom ;

	- Viewer
		- Architecture :
			G ---> V					(tout dans le thread swing)
			G ---> Proxy ---> V			(G dans main, et V dans swing)
			
		- Proposer ce fonctionnement :
			- Pour les applications entièrement en Swing, fonctionnant dans le thread Swing:
				* Le viewer est un output listener du graphe qui sert d'input.
				* Le layout est dans son propre thread.
				* Des attributs sur le graphe permettent de commander le layout.
			- Pour les applications simples qui cherchent à afficher seulement le graphe
				* On utilise graph.display qui crée un proxy du thread main vers swing.
				* Des attributs sur le graphe permettent de commander le layout
				* Des attributs sur le graphe permettent de commander le viewer en partir.
				* Il existe une interface DistantGraphViewer qui permet de commander le viewer/layout.
				
			- La méthode graph.display() lance le viewer et un layout.
			- La création du GraphViewerOuput ne crée pas l'algo de layout.
			- Le layout est connecté au graphe principal pas au graphe graphique.
			
			- Les sprites sont des attributs du graphe
				"sprite%s1%edg" "E1"				Attachement du sprite "s1" à un arc.
				"sprite%s1%nod" "N1"				Attachement à un noeud.
				"sprite%s1%det"						Detachement.
				"sprite%s1%pos" "0.5"				Positionnement.
				"sprite%s1%pos" "0.5:0.5:0.5"		Positionnement 3D.
				"sprite%s1%+at" "truc:valeur"		Place attribute "truc" à "valeur".
				"sprite%s1%-at" "truc"				Enlève l'attribut "truc".
			- Les sprites seront ainsi sauvegardés avec les graphe.
			- L'API sera moins compliquée.
			- Proposer un objet SpriteManager(G) qui gère l'ensemble des sprites
			  sur un graphe et gère ces attributs bizarres.
			- Proposer une classe Sprite qui permet de manipuler un sprite.
				
			- Le layout est controllé par des attributs du graphe :
				"layout.force"		 	"0.5"		Force générale.
				"layout.freeze"						Si présent le layout se freeze.
				"layout.freeze_node"	"N1"		Freeze le node "N1".
				"layout.quality"		"4"			Réglage qualité/vitesse.
			- Le retour des informations sur les positions est réalisée par un
			  ThreadProxyFilter "dans l'autre sens" (sur les attribus seulement).
	
		- Maj. OpenGL
		- Utilisabilité
		- Freeze du layout lors du drag
		- sprites interactifs
		- bouttons,
		- zones de saisies. 
		- Comment g�rer la rotation du graphe dans le viewer ?
			- setRotationAngles( theta, phi );	avec phi non utilis� en 2D.
		- Benchmarks
			- On a d�j� les FPS.
		- Viewer HQ Swing
			- Un renderer HQ.
		- Viewer HQ OpenGL :
			- Le viewer doit �tre capable :
				- d'accelerer la 2D
				- de faire de la 3D 

		- Faire en sorte que les sprites soient des attributs du graphe et retirer cette API trop
		  lourde du GraphViewer/GraphViewerRemote ainsi que les Direct et Remote Sprites.
	  			cn "A" ui.sprite1:[pos:2,3]
	  			ce "AB" ui.sprite2:[pos:1]
		  	Cr�er un objet Sprite qui rende la gestion des attributs n�cessaires et qui impl�mente
		  	GraphAttribute.

	- Une d�mo technologique qui affiche le havre :
		- suffisament rapide
		- affiche les arcs bris�s
		- affiche les types de rues
		- affiche le nom des rues lorsque l'on zoome
		- affiche les tiles de GoogleMaps dans des sprites sous la carte !