/* Generated By:JavaCC: Do not edit this line. GraphReaderTLPParser.java */
package org.graphstream.io.tlp;

import org.graphstream.io.old.GraphReaderListenerExtended;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Reader;

import java.util.Collection;

public class GraphReaderTLPParser implements GraphReaderTLPParserConstants {
        Collection<GraphReaderListenerExtended> listeners;

        public GraphReaderTLPParser(Collection<GraphReaderListenerExtended> ls)
        {
                listeners = ls;
        }

        public void read( String inPath )
        {
                try
                {
                        ReInit( new FileInputStream(inPath) );
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void read( InputStream in )
        {
                ReInit(in);
                try
                {
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void read( Reader in )
        {
                ReInit(in);
                try
                {
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void begin( String inPath )
        {
                try
                {
                        ReInit( new FileInputStream(inPath) );
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void begin( InputStream in )
        {
                ReInit(in);
                try
                {
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void begin( Reader in )
        {
                ReInit(in);
                try
                {
                        start();
                }
                catch( Exception e )
                {
                        e.printStackTrace();
                }
        }

        public void init( InputStream in )
        {
                if( jj_input_stream == null )
                {
                        try
                        {
                                jj_input_stream = new SimpleCharStream(in, null, 1, 1);
                        }
                        catch(java.io.UnsupportedEncodingException e)
                        {
                                throw new RuntimeException(e);
                        }

                token_source = new GraphReaderTLPParserTokenManager(jj_input_stream);
                token = new Token();

                jj_ntk = -1;
                jj_gen = 0;

                for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        }
        else
        {
                ReInit(in);
        }
        }

        public void init( Reader in )
        {
                if( jj_input_stream == null )
                {
                        jj_input_stream = new SimpleCharStream(in, 1, 1);

                token_source = new GraphReaderTLPParserTokenManager(jj_input_stream);
                token = new Token();

                jj_ntk = -1;
                jj_gen = 0;

                for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        }
        else
        {
                ReInit(in);
        }
        }

        protected void addNode( String id )
        {
                //System.err.printf( "add node \"%s\"\n", id );
                for( GraphReaderListenerExtended l : listeners )
                {
                        try
                        {
                                l.nodeAdded(id,null);
                        }
                        catch( Exception e )
                        {
                                e.printStackTrace();
                        }
                }
        }

        protected void addEdge( String id, String src, String trg )
        {
                //System.err.printf( "add edge \"%s\" \"%s\" \"%s\"\n", id, src, trg );
                for( GraphReaderListenerExtended l : listeners )
                {
                        try
                        {
                                l.edgeAdded(id,src,trg,false,null);
                        }
                        catch( Exception e )
                        {
                                e.printStackTrace();
                        }
                }
        }

        protected void addNodeAttribute( String id, String key, Object value )
        {
                //System.err.printf( "add node %s attribute %s=%s\n", id, key, value );
                for( GraphReaderListenerExtended l : listeners )
                {
                        try
                        {
                                l.nodeChanged(id,key,value,false);
                        }
                        catch( Exception e )
                        {
                                e.printStackTrace();
                        }
                }
        }

        protected void addEdgeAttribute( String id, String key, Object value )
        {
                //System.err.printf( "add edge %s attribute %s=%s\n", id, key, value );
                for( GraphReaderListenerExtended l : listeners )
                {
                        try
                        {
                                l.edgeChanged(id,key,value,false);
                        }
                        catch( Exception e )
                        {
                                e.printStackTrace();
                        }
                }
        }

        protected Object unserialize( String type, String value )
        {
                if( type.equals("string") )
                        return value;
                else if( type.equals("bool") )
                        return new Boolean(value);
                else if( type.equals("color") )
                {
                        if( value.startsWith("(") )
                                value = value.substring(1);
                        if( value.endsWith(")") )
                                value = value.substring(0,value.length()-1);

                        String [] comps = value.split(",");

                        if( comps.length == 3 )
                                return new java.awt.Color( Integer.parseInt(comps[0]),Integer.parseInt(comps[1]),Integer.parseInt(comps[2]) );
                        else if( comps.length == 4 )
                                return new java.awt.Color( Integer.parseInt(comps[0]),Integer.parseInt(comps[1]),Integer.parseInt(comps[2]),Integer.parseInt(comps[3]) );
                }
                else if( type.equals("double") )
                        return new Double(value);
                else if( type.equals("int") )
                        return new Integer(value);
                else if( type.equals("layout") )
                {

                }
                else if( type.equals("size") )
                {

                }

                return value;
        }

        protected String unquote( String str )
        {
                if( str.startsWith("\u005c"") && str.endsWith("\u005c"") )
                        return str.substring(1,str.length()-1);

                return str;
        }

  final public void start() throws ParseException {
        Token t;
    jj_consume_token(LPAREN);
    jj_consume_token(TLP);
    t = jj_consume_token(STRING);
                                       System.err.printf( "Tulip file format version %s\u005cn", t.image ); tlpEntry();
    jj_consume_token(RPAREN);
    jj_consume_token(0);
  }

  final public void tlpEntry() throws ParseException {
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NODES:
          jj_consume_token(NODES);
                                                  nodeEntries();
          break;
        case EDGE:
          jj_consume_token(EDGE);
                                                                  edgeEntry();
          break;
        case CLUSTER:
          jj_consume_token(CLUSTER);
                                                          clusterEntry("");
          break;
        case PROPERTY:
          jj_consume_token(PROPERTY);
                                                          propertyEntry();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
        break;
      case COMMENT:
        jj_consume_token(COMMENT);

        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nodeEntries() throws ParseException {
        Token t;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(ID);
                     addNode(t.image);
    }
  }

  final public void edgeEntry() throws ParseException {
        Token id, src, trg;
    id = jj_consume_token(ID);
    src = jj_consume_token(ID);
    trg = jj_consume_token(ID);
                                            addEdge(id.image,src.image,trg.image);
  }

  final public void propertyEntry() throws ParseException {
        Token id, type, name, nodeDef, edgeDef;
    id = jj_consume_token(ID);
    type = jj_consume_token(PTYPES);
    name = jj_consume_token(STRING);
    jj_consume_token(LPAREN);
    jj_consume_token(DEF);
    nodeDef = jj_consume_token(STRING);
    edgeDef = jj_consume_token(STRING);
    jj_consume_token(RPAREN);
                                                                                propertyContent( type.image, unquote(name.image) );
  }

  final public void propertyContent(String type, String key) throws ParseException {
        Token id, value;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
        jj_consume_token(NODE);
        id = jj_consume_token(ID);
        value = jj_consume_token(STRING);
                                                            addNodeAttribute(id.image,key,unserialize(type,unquote(value.image)));
        break;
      case EDGE:
        jj_consume_token(EDGE);
        id = jj_consume_token(ID);
        value = jj_consume_token(STRING);
                                                            addEdgeAttribute(id.image,key,unserialize(type,unquote(value.image)));
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    }
  }

  final public void clusterEntry(String parent) throws ParseException {
        Token id, name;
    id = jj_consume_token(ID);
    name = jj_consume_token(STRING);
                                      clusterContent(parent + id.image);
  }

  final public void clusterContent(String parent) throws ParseException {
        Token id, name;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODES:
        jj_consume_token(NODES);
                                 nodesInCluster(parent);
        break;
      case EDGES:
        jj_consume_token(EDGES);
                                         edgesInCluster(parent);
        break;
      case CLUSTER:
        jj_consume_token(CLUSTER);
                                           clusterEntry(parent+":");
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    }
  }

  final public void nodesInCluster(String cluster) throws ParseException {
        Token id;
    label_5:
    while (true) {
      id = jj_consume_token(ID);
                      addNodeAttribute( id.image, "cluster", cluster );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
  }

  final public void edgesInCluster(String cluster) throws ParseException {
        Token id;
    label_6:
    while (true) {
      id = jj_consume_token(ID);
                      addEdgeAttribute( id.image, "cluster", cluster );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
  }

  /** Generated Token Manager. */
  public GraphReaderTLPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0x72000,0xc0,0x200000,0x80,0x14000,0x80,0x2a000,0x200000,0x200000,};
   }

  /** Constructor with InputStream. */
  public GraphReaderTLPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GraphReaderTLPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GraphReaderTLPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GraphReaderTLPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GraphReaderTLPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GraphReaderTLPParser(GraphReaderTLPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GraphReaderTLPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
