/* Generated By:JavaCC: Do not edit this line. DOTParser.java */
package org.graphstream.stream.file.dot;

import java.io.InputStream;
import java.io.Reader;
import java.util.LinkedList;
import java.util.HashMap;

public class DOTParser implements DOTParserConstants {
        boolean inGraph = false;
        FileSourceDOT dot;

        public DOTParser(FileSourceDOT dot, InputStream stream)
        {
                this(stream);
                this.dot = dot;
        }

        public DOTParser(FileSourceDOT dot, Reader stream )
        {
                this(stream);
                this.dot = dot;
        }

        public boolean isInGraph()
        {
                return inGraph;
        }

/*****************************************************************/
/* The parser.                                                   */
/*****************************************************************/
  final public boolean next() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case SUBGRAPH:
    case NODE:
    case EDGE:
    case REAL:
    case STRING:
    case WORD:
      statement();
                      {if (true) return true;}
      break;
    case RBRACE:
      jj_consume_token(RBRACE);
                   {if (true) return false;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void graph() throws ParseException {
        String graphId = null;
        boolean directed = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRICT:
      jj_consume_token(STRICT);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      jj_consume_token(GRAPH);
      break;
    case DIGRAPH:
      jj_consume_token(DIGRAPH);
                                directed = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case STRING:
    case WORD:
      graphId = id();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
  }

  final public void subgraph() throws ParseException {
    jj_consume_token(SUBGRAPH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case STRING:
    case WORD:
      id();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    jj_consume_token(RBRACE);
  }

  final public String id() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case REAL:
      t = jj_consume_token(REAL);
      break;
    case WORD:
      t = jj_consume_token(WORD);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void statement() throws ParseException {
    if (jj_2_1(3)) {
      edgeStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
      case STRING:
      case WORD:
        nodeStatement();
        break;
      case GRAPH:
      case NODE:
      case EDGE:
        attributeStatement();
        break;
      case SUBGRAPH:
        subgraph();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(27);
  }

  final public void nodeStatement() throws ParseException {
        String nodeId;
        String [] port;

        port = null;
    nodeId = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      port = port();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQBR:
      attributesList();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
          System.out.printf("add node \u005c"%s\u005c"\u005cn", nodeId);
  }

  final public String compassPoint() throws ParseException {
        Token pt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      pt = jj_consume_token(28);
      break;
    case 29:
      pt = jj_consume_token(29);
      break;
    case 30:
      pt = jj_consume_token(30);
      break;
    case 31:
      pt = jj_consume_token(31);
      break;
    case 32:
      pt = jj_consume_token(32);
      break;
    case 33:
      pt = jj_consume_token(33);
      break;
    case 34:
      pt = jj_consume_token(34);
      break;
    case 35:
      pt = jj_consume_token(35);
      break;
    case 36:
      pt = jj_consume_token(36);
      break;
    case 37:
      pt = jj_consume_token(37);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return pt.image;}
    throw new Error("Missing return statement in function");
  }

  final public String [] port() throws ParseException {
        String [] p = { null, null };
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case STRING:
    case WORD:
      p [0] = id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        p [1] = compassPoint();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      p [1] = compassPoint();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public void edgeStatement() throws ParseException {
        String id;
        LinkedList<String> edges = new LinkedList<String>();
    id = id();
                    edges.add(id);
    edgeRHS(edges);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQBR:
      attributesList();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        System.out.printf("add edge : ");
        for( int i=0; i<edges.size(); i++)
                System.out.printf("%s ", edges.get(i));
        System.out.printf("\u005cn");
  }

  final public void edgeRHS(LinkedList<String> edges) throws ParseException {
        Token t;
        String i;
    t = jj_consume_token(EDGE_OP);
                        edges.add(t.image);
    i = id();
                        edges.add(i);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EDGE_OP:
      edgeRHS(edges);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void attributeStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      jj_consume_token(GRAPH);
      break;
    case NODE:
      jj_consume_token(NODE);
      break;
    case EDGE:
      jj_consume_token(EDGE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    attributesList();
  }

  final public HashMap<String,Object> attributesList() throws ParseException {
        HashMap<String, Object> attributes = new HashMap<String, Object>();
    label_1:
    while (true) {
      jj_consume_token(LSQBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
      case STRING:
      case WORD:
        attributeList(attributes);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          attributeList(attributes);
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RSQBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQBR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_1;
      }
    }
          {if (true) return attributes;}
    throw new Error("Missing return statement in function");
  }

  final public void attributeList(HashMap<String,Object> attributes) throws ParseException {
        String key;
        Object val;

        Token t;
    key = id();
                     val = Boolean.TRUE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      if (jj_2_2(2)) {
        t = jj_consume_token(REAL);
                             val = Double.parseDouble(t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REAL:
        case STRING:
        case WORD:
          val = id();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(EDGE_OP)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DOTParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x73a2001,0x400000,0x60000,0x7000000,0x7000000,0x7000000,0x73a0000,0x4000,0x400,0xf0000000,0x4000,0xf7000000,0x400,0x800000,0x320000,0x8000,0x7000000,0x400,0x7000000,0x10000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DOTParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DOTParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DOTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DOTParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DOTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DOTParser(DOTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DOTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
